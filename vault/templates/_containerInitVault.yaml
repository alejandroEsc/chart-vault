{{/*
Create helm partial for Vault initialization
*/}}
{{- define "containerInitVault" }}
- name: {{ template "vault.fullname" . }}
  image: "{{.Values.vault.image}}:{{.Values.vault.imageTag}}"
  imagePullPolicy: {{ .Values.vault.imagePullPolicy }}
  volumeMounts:
  - name: config
    mountPath: /etc/vault/cfg
    readOnly: true
  env:
  - name: SCRIPT
    value: &initVault |-
      #!/bin/sh

      # wait for vault to respond with 501 (uninitialized)
      while [[ "$(curl --connect-timeout 1 -s -o /dev/null -w %{http_code} {{ if .Values.vault.enableTLS }}https{{ else }}http{{ end }}://{{ template "vault.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/v1/sys/health)" != "501" ]]; do sleep 1; done

      # init with the json payload
      while [[ "$(curl --connect-timeout 1 -s -o output.json -w %{http_code} --request PUT --data @/etc/vault/cfg/init.json {{ if .Values.vault.enableTLS }}https{{ else }}http{{ end }}://{{ template "vault.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}/v1/sys/init)" != "200" ]]; do sleep 1; done

      # create secret out of the output.json
      kubectl delete secret {{ template "vault.fullname" . }}-keys --namespace {{ .Release.Namespace }} || true  
      kubectl create secret generic {{ template "vault.fullname" . }}-keys --from-file=./output.json --namespace {{ .Release.Namespace }}
  command: [ "bin/sh" ]
  args: ["-c", *initVault]
{{- end }}